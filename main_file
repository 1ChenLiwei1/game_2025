ChatGPT

您说：
用Python写一个Galaxian游戏
ChatGPT 说：
ChatGPT
创建一个简单的Galaxian游戏涉及多个部分，包括图形渲染、事件处理和游戏逻辑。为了简化起见，我们可以使用Python的pygame库来处理图形和事件。

下面是一个基本的Galaxian游戏框架，包含玩家控制的飞船、敌人飞船的生成以及基础的碰撞检测和得分系统。

安装 Pygame
首先，你需要安装pygame库：

pip install pygame
完整代码示例：
import pygame
import random
import sys

# 初始化pygame
pygame.init()

# 屏幕宽度和高度
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption('Galaxian')

# 颜色定义
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)

# 飞船类
class Ship(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pygame.Surface((50, 30))
        self.image.fill(WHITE)
        self.rect = self.image.get_rect()
        self.rect.centerx = WIDTH // 2
        self.rect.bottom = HEIGHT - 10
        self.speed = 5

    def update(self, keys):
        if keys[pygame.K_LEFT] and self.rect.left > 0:
            self.rect.x -= self.speed
        if keys[pygame.K_RIGHT] and self.rect.right < WIDTH:
            self.rect.x += self.speed

    def shoot(self):
        bullet = Bullet(self.rect.centerx, self.rect.top)
        all_sprites.add(bullet)
        bullets.add(bullet)

# 子弹类
class Bullet(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        self.image = pygame.Surface((5, 10))
        self.image.fill(RED)
        self.rect = self.image.get_rect()
        self.rect.centerx = x
        self.rect.bottom = y
        self.speed = 7

    def update(self):
        self.rect.y -= self.speed
        if self.rect.bottom < 0:
            self.kill()

# 敌人类
class Enemy(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        self.image = pygame.Surface((40, 30))
        self.image.fill(RED)
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y
        self.speed = 3

    def update(self):
        self.rect.y += self.speed
        if self.rect.top > HEIGHT:
            self.rect.x = random.randint(0, WIDTH - 40)
            self.rect.y = random.randint(-100, -40)

# 初始化所有对象
all_sprites = pygame.sprite.Group()
ships = pygame.sprite.Group()
bullets = pygame.sprite.Group()
enemies = pygame.sprite.Group()

player = Ship()
all_sprites.add(player)
ships.add(player)

# 创建敌人
for i in range(5):
    for j in range(3):
        enemy = Enemy(i * 60 + 50, j * 50 + 50)
        all_sprites.add(enemy)
        enemies.add(enemy)

# 游戏主循环
clock = pygame.time.Clock()
score = 0
running = True
while running:
    screen.fill(BLACK)
    
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE:
                player.shoot()

    # 更新游戏状态
    keys = pygame.key.get_pressed()
    player.update(keys)
    all_sprites.update()

    # 碰撞检测
    for bullet in bullets:
        hit_enemies = pygame.sprite.spritecollide(bullet, enemies, True)
        if hit_enemies:
            bullet.kill()
            score += len(hit_enemies)
    
    # 绘制所有物体
    all_sprites.draw(screen)

    # 显示得分
    font = pygame.font.SysFont(None, 36)
    score_text = font.render(f'Score: {score}', True, WHITE)
    screen.blit(score_text, (10, 10))

    pygame.display.flip()
    
    # 控制游戏帧率
    clock.tick(60)

# 退出游戏
pygame.quit()
sys.exit()
